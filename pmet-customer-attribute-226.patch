diff --git a/vendor/magento/module-customer-custom-attributes/Controller/Adminhtml/Customer/Address/Attribute/Save.php b/vendor/magento/module-customer-custom-attributes/Controller/Adminhtml/Customer/Address/Attribute/Save.php
index 95f0c7dab05..74e07a38a54 100644
--- a/vendor/magento/module-customer-custom-attributes/Controller/Adminhtml/Customer/Address/Attribute/Save.php
+++ b/vendor/magento/module-customer-custom-attributes/Controller/Adminhtml/Customer/Address/Attribute/Save.php
@@ -13,11 +13,13 @@
 use Magento\Eav\Api\Data\AttributeInterface;
 use Magento\Eav\Model\Config;
 use Magento\Eav\Model\Entity\Attribute\SetFactory;
+use Magento\Framework\App\ObjectManager;
 use Magento\Framework\Controller\Result\Redirect;
 use Magento\Framework\Controller\ResultFactory;
 use Magento\Framework\Exception\LocalizedException;
 use Magento\Framework\Filter\FilterManager;
 use Magento\Framework\Registry;
+use Magento\Framework\Serialize\Serializer\FormData;
 use Magento\Store\Model\WebsiteFactory;

 /**
@@ -40,6 +42,11 @@ class Save extends \Magento\CustomerCustomAttributes\Controller\Adminhtml\Custom
      */
     protected $filterManager;

+    /**
+     * @var FormData
+     */
+    private $formDataSerializer;
+
     /**
      * @param Context $context
      * @param Registry $coreRegistry
@@ -50,6 +57,7 @@ class Save extends \Magento\CustomerCustomAttributes\Controller\Adminhtml\Custom
      * @param HelperData $helperData
      * @param HelperAddress $helperAddress
      * @param FilterManager $filterManager
+     * @param FormData|null $formDataSerializer
      */
     public function __construct(
         Context $context,
@@ -60,11 +68,13 @@ public function __construct(
         WebsiteFactory $websiteFactory,
         HelperData $helperData,
         HelperAddress $helperAddress,
-        FilterManager $filterManager
+        FilterManager $filterManager,
+        FormData $formDataSerializer = null
     ) {
         $this->helperData = $helperData;
         $this->helperAddress = $helperAddress;
         $this->filterManager = $filterManager;
+        $this->formDataSerializer = $formDataSerializer ?: ObjectManager::getInstance()->get(FormData::class);
         parent::__construct(
             $context,
             $coreRegistry,
@@ -90,6 +100,23 @@ public function execute()

         $data = $this->getRequest()->getPostValue();
         if ($this->getRequest()->isPost() && $data) {
+            try {
+                $optionData = $this->formDataSerializer->unserialize(
+                    $this->getRequest()->getParam('serialized_options', '[]')
+                );
+            } catch (\InvalidArgumentException $e) {
+                $message = __("The attribute couldn't be saved due to an error. Verify your information and try again. "
+                    . "If the error persists, please try again later.");
+                $this->messageManager->addErrorMessage($message);
+
+                return $resultRedirect->setPath('adminhtml/*/edit', ['_current' => true]);
+            }
+
+            $data = array_replace_recursive(
+                $data,
+                $optionData
+            );
+
             /* @var $attributeObject \Magento\Customer\Model\Attribute */
             $attributeObject = $this->_initAttribute();

diff --git a/vendor/magento/module-customer-custom-attributes/Controller/Adminhtml/Customer/Attribute/Save.php b/vendor/magento/module-customer-custom-attributes/Controller/Adminhtml/Customer/Attribute/Save.php
index 489263c3e7c..1954cb1443b 100644
--- a/vendor/magento/module-customer-custom-attributes/Controller/Adminhtml/Customer/Attribute/Save.php
+++ b/vendor/magento/module-customer-custom-attributes/Controller/Adminhtml/Customer/Attribute/Save.php
@@ -11,13 +11,17 @@
 use Magento\CustomerCustomAttributes\Helper\Data as HelperData;
 use Magento\Eav\Model\Config;
 use Magento\Eav\Model\Entity\Attribute\SetFactory;
+use Magento\Framework\App\ObjectManager;
 use Magento\Framework\Controller\Result\Redirect;
 use Magento\Framework\Controller\ResultFactory;
 use Magento\Framework\Filter\FilterManager;
 use Magento\Framework\Registry;
+use Magento\Framework\Serialize\Serializer\FormData;
 use Magento\Store\Model\WebsiteFactory;

 /**
+ * Customer custom attribute save controller.
+ *
  * @SuppressWarnings(PHPMD.CouplingBetweenObjects)
  */
 class Save extends \Magento\CustomerCustomAttributes\Controller\Adminhtml\Customer\Attribute
@@ -37,6 +41,11 @@ class Save extends \Magento\CustomerCustomAttributes\Controller\Adminhtml\Custom
      */
     protected $filterManager;

+    /**
+     * @var FormData
+     */
+    private $formDataSerializer;
+
     /**
      * @param Context $context
      * @param Registry $coreRegistry
@@ -47,6 +56,7 @@ class Save extends \Magento\CustomerCustomAttributes\Controller\Adminhtml\Custom
      * @param HelperData $helperData
      * @param HelperCustomer $helperCustomer
      * @param FilterManager $filterManager
+     * @param FormData|null $formDataSerializer
      */
     public function __construct(
         Context $context,
@@ -57,11 +67,13 @@ public function __construct(
         WebsiteFactory $websiteFactory,
         HelperData $helperData,
         HelperCustomer $helperCustomer,
-        FilterManager $filterManager
+        FilterManager $filterManager,
+        FormData $formDataSerializer
     ) {
         $this->helperData = $helperData;
         $this->helperCustomer = $helperCustomer;
         $this->filterManager = $filterManager;
+        $this->formDataSerializer = $formDataSerializer ?: ObjectManager::getInstance()->get(FormData::class);
         parent::__construct(
             $context,
             $coreRegistry,
@@ -85,7 +97,23 @@ public function execute()
         /** @var Redirect $resultRedirect */
         $resultRedirect = $this->resultFactory->create(ResultFactory::TYPE_REDIRECT);

+        try {
+            $optionData = $this->formDataSerializer
+                ->unserialize($this->getRequest()->getParam('serialized_options', '[]'));
+        } catch (\InvalidArgumentException $e) {
+            $message = __("The attribute couldn't be saved due to an error. Verify your information and try again. "
+                . "If the error persists, please try again later.");
+            $this->messageManager->addErrorMessage($message);
+
+            return $resultRedirect->setPath('adminhtml/*/edit', ['_current' => true]);
+        }
+
         $data = $this->getRequest()->getPostValue();
+        $data = array_replace_recursive(
+            $data,
+            $optionData
+        );
+
         if ($this->getRequest()->isPost() && $data) {
             /* @var $attributeObject \Magento\Customer\Model\Attribute */
             $attributeObject = $this->_initAttribute();
@@ -142,7 +170,7 @@ public function execute()
                 $data['attribute_group_id'] = $attrSet->getDefaultGroupId($data['attribute_set_id']);
                 if (empty($data['used_in_forms'])) {
                     $data['used_in_forms'] = ['adminhtml_customer'];
-                } else if (is_array($data['used_in_forms'])) {
+                } elseif (is_array($data['used_in_forms'])) {
                     $data['used_in_forms'][] = 'adminhtml_customer';
                 }
             }
diff --git a/vendor/magento/module-customer-custom-attributes/Test/Unit/Controller/Adminhtml/Customer/Address/Attribute/SaveTest.php b/vendor/magento/module-customer-custom-attributes/Test/Unit/Controller/Adminhtml/Customer/Address/Attribute/SaveTest.php
index 89cfae619c6..374219542b8 100644
--- a/vendor/magento/module-customer-custom-attributes/Test/Unit/Controller/Adminhtml/Customer/Address/Attribute/SaveTest.php
+++ b/vendor/magento/module-customer-custom-attributes/Test/Unit/Controller/Adminhtml/Customer/Address/Attribute/SaveTest.php
@@ -23,6 +23,7 @@
 use Magento\Framework\Filter\FilterManager;
 use Magento\Framework\Message\ManagerInterface;
 use Magento\Framework\Registry;
+use Magento\Framework\Serialize\Serializer\FormData;
 use Magento\Store\Model\Website;
 use Magento\Store\Model\WebsiteFactory;

@@ -89,6 +90,14 @@ class SaveTest extends \PHPUnit\Framework\TestCase
     /** @var  Website |\PHPUnit_Framework_MockObject_MockObject */
     protected $website;

+    /**
+     * @var FormData|\PHPUnit_Framework_MockObject_MockObject
+     */
+    private $formDataSerializerMock;
+
+    /**
+     * @inheritdoc
+     */
     protected function setUp()
     {
         $this->prepareContext();
@@ -96,33 +105,31 @@ protected function setUp()
         $this->registry = $this->getMockBuilder(\Magento\Framework\Registry::class)
             ->disableOriginalConstructor()
             ->getMock();
-
         $this->config = $this->getMockBuilder(\Magento\Eav\Model\Config::class)
             ->disableOriginalConstructor()
             ->getMock();

         $this->prepareAttributeFactory();
-
         $this->prepareWebsite();

         $this->helperData = $this->getMockBuilder(\Magento\CustomerCustomAttributes\Helper\Data::class)
             ->disableOriginalConstructor()
             ->getMock();
-
         $this->helperAddress = $this->getMockBuilder(\Magento\CustomerCustomAttributes\Helper\Address::class)
             ->disableOriginalConstructor()
             ->getMock();
-
         $this->filterManager = $this->getMockBuilder(\Magento\Framework\Filter\FilterManager::class)
             ->disableOriginalConstructor()
             ->setMethods([
                 'stripTags',
             ])
             ->getMock();
-
         $this->entityType = $this->getMockBuilder(\Magento\Eav\Model\Entity\Type::class)
             ->disableOriginalConstructor()
             ->getMock();
+        $this->formDataSerializerMock = $this->getMockBuilder(FormData::class)
+            ->disableOriginalConstructor()
+            ->getMock();

         $this->model = new Save(
             $this->context,
@@ -133,7 +140,8 @@ protected function setUp()
             $this->websiteFactory,
             $this->helperData,
             $this->helperAddress,
-            $this->filterManager
+            $this->filterManager,
+            $this->formDataSerializerMock
         );
     }

@@ -160,6 +168,7 @@ protected function prepareContext()
             ->setMethods([
                 'addSuccess',
                 'addError',
+                'addErrorMessage',
             ])
             ->getMockForAbstractClass();

@@ -262,6 +271,12 @@ public function testExecuteNoPostData()
     {
         $data = [];

+        $this->request->expects($this->any())
+            ->method('getParam')
+            ->with()
+            ->willReturnMap([
+                ['serialized_options', '[]', ''],
+            ]);
         $this->request->expects($this->once())
             ->method('getPostValue')
             ->willReturn($data);
@@ -294,10 +309,12 @@ public function testExecutePostDataException(
         $this->request->expects($this->once())
             ->method('isPost')
             ->willReturn(true);
-        $this->request->expects($this->once())
+        $this->request->expects($this->any())
             ->method('getParam')
-            ->with('website')
-            ->willReturn($websiteId);
+            ->willReturnMap([
+                ['website', null, $websiteId],
+                ['serialized_options', '[]', ''],
+            ]);

         $this->attribute->expects($this->once())
             ->method('setWebsite')
@@ -360,6 +377,7 @@ public function testExecuteWrongEntityType()
             ->willReturnMap([
                 ['website', null, $websiteId],
                 ['attribute_id', null, $attributeId],
+                ['serialized_options', '[]', ''],
             ]);

         $this->attribute->expects($this->once())
@@ -445,6 +463,7 @@ public function testExecute(
                 ['scope_' . $attributeData['default_value'], null, $attributeData['default_value']],
                 [$attributeData['default_value'], null, $attributeData['default_value']],
                 ['back', false, $returnBack],
+                ['serialized_options', '[]', ''],
             ]);
         $this->request->expects($this->once())
             ->method('getPost')
@@ -789,6 +808,7 @@ public function testExecuteSaveAndLocalizedException(
                 ['website', null, $websiteId],
                 ['attribute_id', null, $attributeId],
                 ['scope_' . $attributeData['default_value'], null, $attributeData['default_value']],
+                ['serialized_options', '[]', ''],
             ]);
         $this->request->expects($this->once())
             ->method('getPost')
@@ -968,6 +988,7 @@ public function testExecuteSaveAndException(
                 ['website', null, $websiteId],
                 ['attribute_id', null, $attributeId],
                 ['scope_' . $attributeData['default_value'], null, $attributeData['default_value']],
+                ['serialized_options', '[]', ''],
             ]);
         $this->request->expects($this->once())
             ->method('getPost')
@@ -1115,4 +1136,44 @@ public function dataProviderExecuteSaveAndException()
             ],
         ];
     }
+
+    /**
+     * @return void
+     * @throws \Magento\Framework\Exception\NotFoundException
+     */
+    public function testExecuteWithOptionsDataError()
+    {
+        $serializedOptions = '{"key":"value"}';
+        $message = "The attribute couldn't be saved due to an error. Verify your information and try again. "
+            . "If the error persists, please try again later.";
+
+        $this->request->expects($this->once())
+            ->method('isPost')
+            ->willReturn(true);
+        $this->request->expects($this->once())
+            ->method('getPostValue')
+            ->willReturn(['key' => 'value']);
+        $this->request
+            ->expects($this->any())
+            ->method('getParam')
+            ->willReturnMap([
+                ['serialized_options', '[]', $serializedOptions],
+            ]);
+        $this->formDataSerializerMock
+            ->expects($this->once())
+            ->method('unserialize')
+            ->with($serializedOptions)
+            ->willThrowException(new \InvalidArgumentException('Some exception'));
+        $this->messageManager
+            ->expects($this->once())
+            ->method('addErrorMessage')
+            ->with($message);
+        $this->resultRedirect
+            ->expects($this->once())
+            ->method('setPath')
+            ->with('adminhtml/*/edit', ['_current' => true])
+            ->willReturnSelf();
+
+        $this->assertEquals($this->resultRedirect, $this->model->execute());
+    }
 }
diff --git a/vendor/magento/module-customer-custom-attributes/Test/Unit/Controller/Adminhtml/Customer/Attribute/SaveTest.php b/vendor/magento/module-customer-custom-attributes/Test/Unit/Controller/Adminhtml/Customer/Attribute/SaveTest.php
index a5bdd05c9a8..c5f46af6370 100644
--- a/vendor/magento/module-customer-custom-attributes/Test/Unit/Controller/Adminhtml/Customer/Attribute/SaveTest.php
+++ b/vendor/magento/module-customer-custom-attributes/Test/Unit/Controller/Adminhtml/Customer/Attribute/SaveTest.php
@@ -24,6 +24,7 @@
 use Magento\Framework\Filter\FilterManager;
 use Magento\Framework\Message\ManagerInterface;
 use Magento\Framework\Registry;
+use Magento\Framework\Serialize\Serializer\FormData;
 use Magento\Store\Model\Website;
 use Magento\Store\Model\WebsiteFactory;

@@ -93,6 +94,11 @@ class SaveTest extends \PHPUnit\Framework\TestCase
     /** @var  EventManager |\PHPUnit_Framework_MockObject_MockObject */
     protected $eventManager;

+    /**
+     * @var FormData|\PHPUnit_Framework_MockObject_MockObject
+     */
+    private $dataSerializerMock;
+
     protected function setUp()
     {
         $this->prepareContext();
@@ -100,33 +106,31 @@ protected function setUp()
         $this->registry = $this->getMockBuilder(\Magento\Framework\Registry::class)
             ->disableOriginalConstructor()
             ->getMock();
-
         $this->config = $this->getMockBuilder(\Magento\Eav\Model\Config::class)
             ->disableOriginalConstructor()
             ->getMock();

         $this->prepareAttributeFactory();
-
         $this->prepareWebsite();

         $this->helperData = $this->getMockBuilder(\Magento\CustomerCustomAttributes\Helper\Data::class)
             ->disableOriginalConstructor()
             ->getMock();
-
         $this->helperCustomer = $this->getMockBuilder(\Magento\CustomerCustomAttributes\Helper\Customer::class)
             ->disableOriginalConstructor()
             ->getMock();
-
         $this->filterManager = $this->getMockBuilder(\Magento\Framework\Filter\FilterManager::class)
             ->disableOriginalConstructor()
             ->setMethods([
                 'stripTags',
             ])
             ->getMock();
-
         $this->entityType = $this->getMockBuilder(\Magento\Eav\Model\Entity\Type::class)
             ->disableOriginalConstructor()
             ->getMock();
+        $this->dataSerializerMock = $this->getMockBuilder(FormData::class)
+            ->disableOriginalConstructor()
+            ->getMock();

         $this->model = new Save(
             $this->context,
@@ -137,7 +141,8 @@ protected function setUp()
             $this->websiteFactory,
             $this->helperData,
             $this->helperCustomer,
-            $this->filterManager
+            $this->filterManager,
+            $this->dataSerializerMock
         );
     }

@@ -273,6 +278,17 @@ public function testExecuteNoPostData()
     {
         $data = [];

+        $this->request->expects($this->once())
+            ->method('getParam')
+            ->with()
+            ->willReturnMap([
+                ['serialized_options', '[]', ''],
+            ]);
+        $this->dataSerializerMock
+            ->expects($this->once())
+            ->method('unserialize')
+            ->with('')
+            ->willReturn([]);
         $this->request->expects($this->once())
             ->method('getPostValue')
             ->willReturn($data);
@@ -305,10 +321,16 @@ public function testExecutePostDataException(
         $this->request->expects($this->once())
             ->method('isPost')
             ->willReturn(true);
-        $this->request->expects($this->once())
+        $this->request->expects($this->any())
             ->method('getParam')
-            ->with('website')
-            ->willReturn($websiteId);
+            ->willReturnMap([
+                ['website', null, $websiteId],
+                ['serialized_options', '[]', ''],
+            ]);
+        $this->dataSerializerMock->expects($this->once())
+            ->method('unserialize')
+            ->with('')
+            ->willReturn([]);

         $this->attribute->expects($this->once())
             ->method('setWebsite')
@@ -371,7 +393,12 @@ public function testExecuteWrongEntityType()
             ->willReturnMap([
                 ['website', null, $websiteId],
                 ['attribute_id', null, $attributeId],
+                ['serialized_options', '[]', ''],
             ]);
+        $this->dataSerializerMock->expects($this->once())
+            ->method('unserialize')
+            ->with('')
+            ->willReturn([]);

         $this->attribute->expects($this->once())
             ->method('setWebsite')
@@ -456,7 +483,12 @@ public function testExecute(
                 ['scope_' . $attributeData['default_value'], null, $attributeData['default_value']],
                 [$attributeData['default_value'], null, $attributeData['default_value']],
                 ['back', false, $returnBack],
+                ['serialized_options', '[]', ''],
             ]);
+        $this->dataSerializerMock->expects($this->once())
+            ->method('unserialize')
+            ->with('')
+            ->willReturn([]);
         $this->request->expects($this->once())
             ->method('getPost')
             ->with('use_default')
@@ -815,7 +847,12 @@ public function testExecuteSaveAndLocalizedException(
                 ['website', null, $websiteId],
                 ['attribute_id', null, $attributeId],
                 ['scope_' . $attributeData['default_value'], null, $attributeData['default_value']],
+                ['serialized_options', '[]', ''],
             ]);
+        $this->dataSerializerMock->expects($this->once())
+            ->method('unserialize')
+            ->with('')
+            ->willReturn([]);
         $this->request->expects($this->once())
             ->method('getPost')
             ->with('use_default')
@@ -994,7 +1031,12 @@ public function testExecuteSaveAndException(
                 ['website', null, $websiteId],
                 ['attribute_id', null, $attributeId],
                 ['scope_' . $attributeData['default_value'], null, $attributeData['default_value']],
+                ['serialized_options', '[]', ''],
             ]);
+        $this->dataSerializerMock->expects($this->once())
+            ->method('unserialize')
+            ->with('')
+            ->willReturn([]);
         $this->request->expects($this->once())
             ->method('getPost')
             ->with('use_default')
@@ -1141,4 +1183,38 @@ public function dataProviderExecuteSaveAndException()
             ],
         ];
     }
+
+    /**
+     * @return void
+     * @throws \Magento\Framework\Exception\NotFoundException
+     */
+    public function testExecuteWithOptionsDataError()
+    {
+        $serializedOptions = '{"key":"value"}';
+        $message = "The attribute couldn't be saved due to an error. Verify your information and try again. "
+            . "If the error persists, please try again later.";
+
+        $this->request
+            ->method('getParam')
+            ->willReturnMap([
+                ['serialized_options', '[]', $serializedOptions],
+            ]);
+        $this->dataSerializerMock
+            ->expects($this->once())
+            ->method('unserialize')
+            ->with($serializedOptions)
+            ->willThrowException(new \InvalidArgumentException('Some exception'));
+
+        $this->messageManager
+            ->expects($this->once())
+            ->method('addErrorMessage')
+            ->with($message);
+        $this->resultRedirect
+            ->expects($this->once())
+            ->method('setPath')
+            ->with('adminhtml/*/edit', ['_current' => true])
+            ->willReturnSelf();
+
+        $this->assertEquals($this->resultRedirect, $this->model->execute());
+    }
 }
diff --git a/vendor/magento/module-customer-custom-attributes/view/adminhtml/templates/attribute/js.phtml b/vendor/magento/module-customer-custom-attributes/view/adminhtml/templates/attribute/js.phtml
index b7ab968ff13..ab6622f81c4 100644
--- a/vendor/magento/module-customer-custom-attributes/view/adminhtml/templates/attribute/js.phtml
+++ b/vendor/magento/module-customer-custom-attributes/view/adminhtml/templates/attribute/js.phtml
@@ -135,14 +135,17 @@ switchDefaultValueField = function()
     setRowVisibility('date_range_min', show_default_value_date);
     setRowVisibility('date_range_max', show_default_value_date);

-    var panel = $('manage-options-panel');
+    var panel = $('manage-options-panel'),
+        activePanelClass = 'selected-type-options';
     if (show_option_panel) {
         $(panel).up().show();
+        jQuery(panel).addClass(activePanelClass);
         registry.get('manage-options-panel', function () {
             jQuery('#manage-options-panel').trigger('render');
         });
     } else {
         $(panel).up().hide();
+        jQuery(panel).removeClass(activePanelClass);
     }
 }

diff --git a/vendor/magento/module-rma/Controller/Adminhtml/Rma/Item/Attribute/Save.php b/vendor/magento/module-rma/Controller/Adminhtml/Rma/Item/Attribute/Save.php
index 7a031e242b1..e7dbb52ae6d 100644
--- a/vendor/magento/module-rma/Controller/Adminhtml/Rma/Item/Attribute/Save.php
+++ b/vendor/magento/module-rma/Controller/Adminhtml/Rma/Item/Attribute/Save.php
@@ -6,10 +6,40 @@
  */
 namespace Magento\Rma\Controller\Adminhtml\Rma\Item\Attribute;

+use Magento\Framework\App\ObjectManager;
+use Magento\Framework\Serialize\Serializer\FormData;
+use Magento\Framework\Registry;
+use Magento\Backend\App\Action\Context;
+use Magento\Store\Model\WebsiteFactory;
+
+/**
+ * RMA attribute save controller.
+ */
 class Save extends \Magento\Rma\Controller\Adminhtml\Rma\Item\Attribute
 {
     /**
-     * Save attribute action
+     * @var FormData
+     */
+    private $formDataSerializer;
+
+    /**
+     * @param Context $context
+     * @param Registry $coreRegistry
+     * @param WebsiteFactory $websiteFactory
+     * @param FormData|null $formDataSerializer
+     */
+    public function __construct(
+        Context $context,
+        Registry $coreRegistry,
+        WebsiteFactory $websiteFactory,
+        FormData $formDataSerializer = null
+    ) {
+        parent::__construct($context, $coreRegistry, $websiteFactory);
+        $this->formDataSerializer = $formDataSerializer ?: ObjectManager::getInstance()->get(FormData::class);
+    }
+
+    /**
+     * Save attribute action.
      *
      * @return void
      * @SuppressWarnings(PHPMD.CyclomaticComplexity)
@@ -18,7 +48,25 @@ class Save extends \Magento\Rma\Controller\Adminhtml\Rma\Item\Attribute
      */
     public function execute()
     {
+        try {
+            $optionData = $this->formDataSerializer->unserialize(
+                $this->getRequest()->getParam('serialized_options', '[]')
+            );
+        } catch (\InvalidArgumentException $e) {
+            $message = __("The attribute couldn't be saved due to an error. Verify your information and try again. "
+                . "If the error persists, please try again later.");
+            $this->messageManager->addErrorMessage($message);
+            $this->_redirect('adminhtml/*/edit', ['_current' => true]);
+
+            return;
+        }
+
         $data = $this->getRequest()->getPostValue();
+        $data = array_replace_recursive(
+            $data,
+            $optionData
+        );
+
         if ($this->getRequest()->isPost() && $data) {
             /* @var $attributeObject \Magento\Rma\Model\Item\Attribute */
             $attributeObject = $this->_initAttribute();
diff --git a/vendor/magento/module-rma/Test/Unit/Controller/Adminhtml/Rma/Item/Attribute/SaveTest.php b/vendor/magento/module-rma/Test/Unit/Controller/Adminhtml/Rma/Item/Attribute/SaveTest.php
index d5ae0bc1799..a22e0bead67 100644
--- a/vendor/magento/module-rma/Test/Unit/Controller/Adminhtml/Rma/Item/Attribute/SaveTest.php
+++ b/vendor/magento/module-rma/Test/Unit/Controller/Adminhtml/Rma/Item/Attribute/SaveTest.php
@@ -7,6 +7,9 @@

 namespace Magento\Rma\Test\Unit\Controller\Adminhtml\Rma\Item\Attribute;

+use Magento\Framework\Registry;
+use Magento\Framework\Serialize\Serializer\FormData;
+
 /**
  * Class SaveTest
  * @SuppressWarnings(PHPMD.CouplingBetweenObjects)
@@ -105,8 +108,17 @@ class SaveTest extends \PHPUnit\Framework\TestCase
     protected $websiteFactoryMock;

     /**
-     * Set up before each test
-     * @return void
+     * @var Registry|\PHPUnit_Framework_MockObject_MockObject
+     */
+    private $coreRegistryMock;
+
+    /**
+     * @var FormData|\PHPUnit_Framework_MockObject_MockObject
+     */
+    private $formDataSerializerMock;
+
+    /**
+     * @inheritdoc
      */
     protected function setUp()
     {
@@ -159,17 +171,26 @@ protected function setUp()
         $this->contextMock->expects($this->atLeastOnce())
             ->method('getMessageManager')
             ->willReturn($this->messageManagerMock);
+        $this->coreRegistryMock = $this->getMockBuilder(Registry::class)
+            ->disableOriginalConstructor()
+            ->getMock();
+        $this->formDataSerializerMock = $this->getMockBuilder(FormData::class)
+            ->disableOriginalConstructor()
+            ->getMock();
+
         $this->action = $this->objectManager->getObject(
             \Magento\Rma\Controller\Adminhtml\Rma\Item\Attribute\Save::class,
             [
                 'context' => $this->contextMock,
-                'websiteFactory' => $this->websiteFactoryMock
+                'coreRegistry' => $this->coreRegistryMock,
+                'websiteFactory' => $this->websiteFactoryMock,
+                'formDataSerializer' => $this->formDataSerializerMock,
             ]
         );
     }

     /**
-     * Test for execute method
+     * Test for execute method.
      * @return void
      */
     public function testExecute()
@@ -179,6 +200,15 @@ public function testExecute()
             ->willReturn([
                 'frontend_input'=> '',
             ]);
+        $this->requestMock->expects($this->any())
+            ->method('getParam')
+            ->willReturnMap([
+                ['serialized_options', '[]', ''],
+            ]);
+        $this->formDataSerializerMock->expects($this->once())
+            ->method('unserialize')
+            ->with('')
+            ->willReturn([]);
         $this->attributeHelperMock->expects($this->once())
             ->method('filterPostData')
             ->willReturn(['frontend_input' => 'frontend_input']);
@@ -226,4 +256,34 @@ public function testExecute()
         $this->messageManagerMock->expects($this->once())->method('addSuccess');
         $this->assertEmpty($this->action->execute());
     }
+
+    /**
+     * @return void
+     * @throws \Magento\Framework\Exception\NotFoundException
+     */
+    public function testExecuteWithOptionsDataError()
+    {
+        $serializedOptions = '{"key":"value"}';
+        $message = "The attribute couldn't be saved due to an error. Verify your information and try again. "
+            . "If the error persists, please try again later.";
+
+        $this->requestMock
+            ->expects($this->any())
+            ->method('getParam')
+            ->willReturnMap([
+                ['serialized_options', '[]', $serializedOptions],
+            ]);
+        $this->messageManagerMock
+            ->expects($this->once())
+            ->method('addErrorMessage')
+            ->with($message);
+
+        $this->formDataSerializerMock
+            ->expects($this->once())
+            ->method('unserialize')
+            ->with($serializedOptions)
+            ->willThrowException(new \InvalidArgumentException('Some exception'));
+
+        $this->assertEmpty($this->action->execute());
+    }
 }
diff --git a/vendor/magento/module-rma/view/adminhtml/templates/attribute/js.phtml b/vendor/magento/module-rma/view/adminhtml/templates/attribute/js.phtml
index 0a2af477abd..49f520cc64d 100644
--- a/vendor/magento/module-rma/view/adminhtml/templates/attribute/js.phtml
+++ b/vendor/magento/module-rma/view/adminhtml/templates/attribute/js.phtml
@@ -135,14 +135,17 @@ function switchDefaultValueField()
     setRowVisibility('max_image_width', show_max_image_width);
     setRowVisibility('max_image_heght', show_max_image_heght);

-    var panel = $('manage-options-panel');
+    var panel = $('manage-options-panel'),
+        activePanelClass = 'selected-type-options';
     if (show_option_panel) {
         $(panel).up().show();
+        jQuery(panel).addClass(activePanelClass);
         registry.get('manage-options-panel', function () {
             jQuery('#manage-options-panel').trigger('render');
         });
     } else {
         $(panel).up().hide();
+        jQuery(panel).removeClass(activePanelClass);
     }
 }

diff --git a/vendor/magento/module-customer-custom-attributes/Controller/Adminhtml/Customer/Address/Attribute/Save.php b/vendor/magento/module-customer-custom-attributes/Controller/Adminhtml/Customer/Address/Attribute/Save.php
index 74e07a38a54..8b631f39c43 100644
--- a/vendor/magento/module-customer-custom-attributes/Controller/Adminhtml/Customer/Address/Attribute/Save.php
+++ b/vendor/magento/module-customer-custom-attributes/Controller/Adminhtml/Customer/Address/Attribute/Save.php
@@ -58,6 +58,7 @@ class Save extends \Magento\CustomerCustomAttributes\Controller\Adminhtml\Custom
      * @param HelperAddress $helperAddress
      * @param FilterManager $filterManager
      * @param FormData|null $formDataSerializer
+     * @SuppressWarnings(PHPMD.ExcessiveParameterList)
      */
     public function __construct(
         Context $context,
diff --git a/vendor/magento/module-customer-custom-attributes/Controller/Adminhtml/Customer/Attribute/Save.php b/vendor/magento/module-customer-custom-attributes/Controller/Adminhtml/Customer/Attribute/Save.php
index 1954cb1443b..130113ce273 100644
--- a/vendor/magento/module-customer-custom-attributes/Controller/Adminhtml/Customer/Attribute/Save.php
+++ b/vendor/magento/module-customer-custom-attributes/Controller/Adminhtml/Customer/Attribute/Save.php
@@ -57,6 +57,7 @@ class Save extends \Magento\CustomerCustomAttributes\Controller\Adminhtml\Custom
      * @param HelperCustomer $helperCustomer
      * @param FilterManager $filterManager
      * @param FormData|null $formDataSerializer
+     * @SuppressWarnings(PHPMD.ExcessiveParameterList)
      */
     public function __construct(
         Context $context,
diff --git a/vendor/magento/module-customer-custom-attributes/Controller/Adminhtml/Customer/Attribute/Save.php b/vendor/magento/module-customer-custom-attributes/Controller/Adminhtml/Customer/Attribute/Save.php
index 130113ce273..23883b796a9 100644
--- a/vendor/magento/module-customer-custom-attributes/Controller/Adminhtml/Customer/Attribute/Save.php
+++ b/vendor/magento/module-customer-custom-attributes/Controller/Adminhtml/Customer/Attribute/Save.php
@@ -69,7 +69,7 @@ public function __construct(
         HelperData $helperData,
         HelperCustomer $helperCustomer,
         FilterManager $filterManager,
-        FormData $formDataSerializer
+        FormData $formDataSerializer = null
     ) {
         $this->helperData = $helperData;
         $this->helperCustomer = $helperCustomer;
diff --git a/vendor/magento/module-customer-custom-attributes/Controller/Adminhtml/Customer/Address/Attribute/Save.php b/vendor/magento/module-customer-custom-attributes/Controller/Adminhtml/Customer/Address/Attribute/Save.php
index 8b631f39c43..26a7fe5c45a 100644
--- a/vendor/magento/module-customer-custom-attributes/Controller/Adminhtml/Customer/Address/Attribute/Save.php
+++ b/vendor/magento/module-customer-custom-attributes/Controller/Adminhtml/Customer/Address/Attribute/Save.php
@@ -171,7 +171,11 @@ public function execute()
                 /** @var $attrSet \Magento\Eav\Model\Entity\Attribute\Set */
                 $attrSet = $this->_attrSetFactory->create();
                 $data['attribute_group_id'] = $attrSet->getDefaultGroupId($data['attribute_set_id']);
-                $data['used_in_forms'][] = 'adminhtml_customer_address';
+                if (empty($data['used_in_forms'])) {
+                    $data['used_in_forms'] = ['adminhtml_customer_address'];
+                } else if (is_array($data['used_in_forms'])) {
+                    $data['used_in_forms'][] = 'adminhtml_customer_address';
+                }
             }

             $defaultValueField = $this->helperData->getAttributeDefaultValueByInput($data['frontend_input']);
diff --git a/vendor/magento/framework/Serialize/Serializer/FormData.php b/vendor/magento/framework/Serialize/Serializer/FormData.php
new file mode 100644
index 00000000..077e9179
--- /dev/null
+++ b/vendor/magento/framework/Serialize/Serializer/FormData.php
@@ -0,0 +1,55 @@
+<?php
+/**
+ * Copyright © Magento, Inc. All rights reserved.
+ * See COPYING.txt for license details.
+ */
+
+declare(strict_types=1);
+
+namespace Magento\Framework\Serialize\Serializer;
+
+use Magento\Framework\Serialize\Serializer\Json;
+
+/**
+ * Class for processing of serialized form data.
+ */
+class FormData
+{
+    /**
+     * @var Json
+     */
+    private $serializer;
+
+    /**
+     * @param Json $serializer
+     */
+    public function __construct(Json $serializer)
+    {
+        $this->serializer = $serializer;
+    }
+
+    /**
+     * Provides form data from the serialized data.
+     *
+     * @param string $serializedData
+     * @return array
+     * @throws \InvalidArgumentException
+     */
+    public function unserialize(string $serializedData): array
+    {
+        $encodedFields = $this->serializer->unserialize($serializedData);
+
+        if (!is_array($encodedFields)) {
+            throw new \InvalidArgumentException('Unable to unserialize value.');
+        }
+
+        $formData = [];
+        foreach ($encodedFields as $item) {
+            $decodedFieldData = [];
+            parse_str($item, $decodedFieldData);
+            $formData = array_replace_recursive($formData, $decodedFieldData);
+        }
+
+        return $formData;
+    }
+}
